"""
–ú–æ–¥—É–ª—å –≤–∏–¥–∂–µ—Ç–∞ –¥–µ—Ä–µ–≤–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
"""
from PyQt5.QtWidgets import QTreeWidget, QTreeWidgetItem
from PyQt5.QtCore import pyqtSignal, Qt
import json
from pathlib import Path
from PyQt5.QtGui import QIcon


class JsonTreeWidget(QTreeWidget):
    """–í–∏–¥–∂–µ—Ç –¥–µ—Ä–µ–≤–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã JSON"""

    # –≠–º–∏—Ç–∏—Ä—É–µ–º –ø—É—Ç—å –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π/–∏–Ω–¥–µ–∫—Å–æ–≤ –∏ –∏–Ω–¥–µ–∫—Å –≤—Ö–æ–∂–¥–µ–Ω–∏—è
    itemSelected = pyqtSignal(list, int)
    # –°–∏–≥–Ω–∞–ª –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è: (path, new_text)
    itemEdited = pyqtSignal(list, str)

    def __init__(self):
        super().__init__()
        self.setHeaderLabel("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON")
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        self.itemClicked.connect(self.on_item_clicked)
        self.itemChanged.connect(self.on_item_changed)
        # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤—Ö–æ–∂–¥–µ–Ω–∏–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π –∑–Ω–∞—á–µ–Ω–∏–π
        self._repr_counts = {}
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ –ø–∞—Ä–µ –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ (–¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤), —á—Ç–æ–±—ã —Ä–∞–∑–ª–∏—á–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö –∫–ª—é—á–∞—Ö
        self._kv_repr_counts = {}

    def _get_type_emoji(self, value) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–Ω–∞—á–µ–Ω–∏—è"""
        if isinstance(value, dict):
            return "üìë"  # –°–ª–æ–≤–∞—Ä—å
        elif isinstance(value, list):
            return "üìã"  # –°–ø–∏—Å–æ–∫ 
        elif isinstance(value, bool):
            return "‚úì" if value else "‚ùå"  # –õ–æ–≥–∏—á–µ—Å–∫–æ–µ
        elif isinstance(value, (int, float)):
            return "üî¢"  # –ß–∏—Å–ª–æ
        elif isinstance(value, str):
            return "üìù"  # –°—Ç—Ä–æ–∫–∞
        elif value is None:
            return "‚ùì"  # None
        return "üìÑ"  # –ü—Ä–æ—á–µ–µ

    def load_json(self, data):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON –¥–∞–Ω–Ω—ã–µ –≤ –¥–µ—Ä–µ–≤–æ"""
        # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –≤—Ä–µ–º—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
        self.blockSignals(True)
        try:
            self.clear()
            self._repr_counts = {}
            self._kv_repr_counts = {}
            if isinstance(data, dict):
                self.add_dict_items(self.invisibleRootItem(), data, [])
            elif isinstance(data, list):
                self.add_list_items(self.invisibleRootItem(), data, [])
            self.expandAll()
        finally:
            self.blockSignals(False)

    def add_dict_items(self, parent, data, path):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ª–æ–≤–∞—Ä—è –≤ –¥–µ—Ä–µ–≤–µ"""
        for key, value in data.items():
            item = QTreeWidgetItem(parent)
            emoji = self._get_type_emoji(value)
            item.setText(0, f"üîë {key} {emoji}")
            current_path = path + [key]
            item.setData(0, Qt.UserRole, current_path)

            if isinstance(value, dict):
                self.add_dict_items(item, value, current_path)
            elif isinstance(value, list):
                self.add_list_items(item, value, current_path)
            else:
                child = QTreeWidgetItem(item)
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ (—á—Ç–æ–±—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑ –¥–∏–∞–ª–æ–≥–æ–≤)
                repr_text = json.dumps(value, ensure_ascii=False)
                child.setText(0, repr_text)
                child.setData(0, Qt.UserRole, current_path)
                # –î–µ–ª–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º
                child.setFlags(child.flags() | Qt.ItemIsEditable)
                # –ò–∫–æ–Ω–∫–∞ –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è
                val_icon = self._get_icon('value')
                if val_icon:
                    child.setIcon(0, val_icon)
                # –°—á–∏—Ç–∞–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—ã –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ
                key_literal = json.dumps(key, ensure_ascii=False)
                kv_key = f"{key_literal}:{repr_text}"
                kv_cnt = self._kv_repr_counts.get(kv_key, 0)
                self._kv_repr_counts[kv_key] = kv_cnt + 1
                child.setData(0, Qt.UserRole + 1, kv_cnt)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ value –∏ –∏–º—è –∫–ª—é—á–∞, —á—Ç–æ–±—ã —Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∏—Å–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                child.setData(0, Qt.UserRole + 2, repr_text)  # value repr
                child.setData(0, Qt.UserRole + 3, key)        # key name
                child.setData(0, Qt.UserRole + 4, tuple(path))  # –ø—É—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (—Ä–æ–¥–∏—Ç–µ–ª—è)

    def add_list_items(self, parent, data, path):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ –≤ –¥–µ—Ä–µ–≤–µ"""
        for i, value in enumerate(data):
            item = QTreeWidgetItem(parent)
            emoji = self._get_type_emoji(value)
            item.setText(0, f"üìå [{i}] {emoji}")
            current_path = path + [i]
            item.setData(0, Qt.UserRole, current_path)

            if isinstance(value, dict):
                self.add_dict_items(item, value, current_path)
            elif isinstance(value, list):
                self.add_list_items(item, value, current_path)
            else:
                child = QTreeWidgetItem(item)
                repr_text = json.dumps(value, ensure_ascii=False)
                emoji = self._get_type_emoji(value)
                child.setText(0, f"{emoji} {repr_text}")
                child.setData(0, Qt.UserRole, current_path)
                child.setFlags(child.flags() | Qt.ItemIsEditable)
                cnt = self._repr_counts.get(repr_text, 0)
                self._repr_counts[repr_text] = cnt + 1
                child.setData(0, Qt.UserRole + 1, cnt)
                child.setData(0, Qt.UserRole + 2, repr_text)
                child.setData(0, Qt.UserRole + 3, None)       # —É —Å–ø–∏—Å–∫–∞ –Ω–µ—Ç –∏–º–µ–Ω–∏ –∫–ª—é—á–∞
                child.setData(0, Qt.UserRole + 4, tuple(path)) # –ø—É—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Å–ø–∏—Å–æ–∫)

    def on_item_clicked(self, item, column):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –¥–µ—Ä–µ–≤–∞"""
        data = item.data(0, Qt.UserRole)
        if data is None:
            return
        path = data
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—Ö–æ–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        idx = item.data(0, Qt.UserRole + 1)
        if idx is None:
            # –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –∏–Ω–¥–µ–∫—Å –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Ç–æ–º–∫–∞
            idx = self._find_occurrence_index_from_children(item)
            if idx is None:
                idx = 0
        self.itemSelected.emit(path, int(idx))

    def on_item_changed(self, item, column):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–µ—Ä–µ–≤–∞"""
        path = item.data(0, Qt.UserRole)
        if path is None:
            return

        text = item.text(0)
        new_text = text

        self.itemEdited.emit(path, new_text)

    def _find_occurrence_index_from_children(self, item):
        """–ò—â–µ—Ç —É –ø–æ—Ç–æ–º–∫–æ–≤ –ø–µ—Ä–≤—ã–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤—Ö–æ–∂–¥–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç int –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."""
        # –ü–æ–∏—Å–∫ –≤ —à–∏—Ä–∏–Ω—É, —á—Ç–æ–±—ã –±–ª–∏–∂–Ω–∏–µ –ø–æ—Ç–æ–º–∫–∏ –∏–º–µ–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        queue = [item]
        while queue:
            current = queue.pop(0)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º–æ–≥–æ current, –≤–¥—Ä—É–≥ —ç—Ç–æ –ª–∏—Å—Ç
            idx = current.data(0, Qt.UserRole + 1)
            if idx is not None:
                return int(idx)
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–µ–π –≤ –æ—á–µ—Ä–µ–¥—å
            for i in range(current.childCount()):
                queue.append(current.child(i))
        return None

    def _get_icon(self, name: str):
        # –ò–∫–æ–Ω–∫–∏ –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–∑–∂–µ; –ø–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        try:
            return QIcon()
        except Exception:
            return None


